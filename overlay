# Local filesystem mounting			-*- shell-script -*-

#
# This script overrides local_mount_root() in /scripts/local
# and mounts root as a read-only filesystem with a temporary (rw)
# overlay filesystem.
#

. /scripts/local

local_mount_root()
{
	local_top
	if [ -z "${ROOT}" ]; then
		panic "No root device specified. Boot arguments must include a root= parameter."
	fi
	local_device_setup "${ROOT}" "root file system"
	ROOT="${DEV}"

	# Get the root filesystem type if not set
	if [ -z "${ROOTFSTYPE}" ] || [ "${ROOTFSTYPE}" = auto ]; then
		FSTYPE=$(get_fstype "${ROOT}")
	else
		FSTYPE=${ROOTFSTYPE}
	fi

	local_premount

	# CHANGES TO THE ORIGINAL FUNCTION BEGIN HERE
	# N.B. this code still lacks error checking

	modprobe ${FSTYPE}
	checkfs "${ROOT}" root "${FSTYPE}"

	# Create directories for root and the overlay
	mkdir /lower /upper

	# Mount read-only root to /lower
	if [ "${FSTYPE}" != "unknown" ]; then
		mount ${FSTYPE:+-t "${FSTYPE}"} ${ROOTFLAGS} "${ROOT}" /lower
	else
		mount -r ${ROOTFLAGS} ${ROOT} /lower
	fi
	mountroot_status="$?"

	modprobe overlay

	# Mount a tmpfs for the overlay in /upper
	mount -t tmpfs tmpfs /upper
	mkdir /upper/data /upper/work

	# Mount the final overlay-root in $rootmnt
	mount -t overlay \
	    -olowerdir=/lower,upperdir=/upper/data,workdir=/upper/work \
	    overlay ${rootmnt}

	# R/W access to the /boot directory will disappear when we pivot
	if [ -d /lower/boot/firmware ]; then
	   [ -z "`ls -A /lower/boot/firmware 2>/dev/null`" ] ||
           mount -o bind /lower/boot/firmware ${rootmnt}/boot/firmware >/dev/null 2>&1 || :
        else
	   [ -z "`ls -A /lower/boot          2>/dev/null`" ] ||
	   mount -o bind /lower/boot ${rootmnt}/boot >/dev/null 2>&1 || :
	fi

	# Some users don't actually want a fully R/O system, but instead
	# merely want to reduce the amount of writes to minimize risk of
	# file system corruption.
	# Uncomment and edit as needed.
	mount -o bind /lower/home ${rootmnt}/home >/dev/null 2>&1 || :
	mount -o remount,rw ${rootmnt}/home >/dev/null 2>&1 || :
}
